#pragma checksum "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\Pages\FetchData.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c03fb1d4fe373d9c0ed73838942dc4e906ee5e68"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace karnekaj123.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\_Imports.razor"
using karnekaj123;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\_Imports.razor"
using karnekaj123.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\_Imports.razor"
using Syncfusion.EJ2.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\_Imports.razor"
using Syncfusion.EJ2.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\_Imports.razor"
using Syncfusion.EJ2.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\_Imports.razor"
using Syncfusion.EJ2.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\Pages\FetchData.razor"
using karnekaj123.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\Pages\FetchData.razor"
using System.Collections.ObjectModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\Pages\FetchData.razor"
using System.ComponentModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\Pages\FetchData.razor"
using static System.Configuration.ConfigurationManager;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\Pages\FetchData.razor"
using System.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\Pages\FetchData.razor"
using System.Data.Entity;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/fetchdata")]
    public partial class FetchData : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 124 "C:\Users\Tomi\Downloads\karnekaj123\karnekaj123\karnekaj123\Pages\FetchData.razor"
      

    int id;
    bool flagid = true;
    string znamka;
    string model;
    int cena;
    public ObservableCollection<ObservableDatas> ObservableAvti { get; set; }
    //List<ObservableDatas> Orders = new List<ObservableDatas>();
    private int uniqueid { get; set; }
    private int uniqueid2 { get; set; }
    private int uniqueid3 { get; set; }
    bool flag = false;




    int IdAvtosalona;
    string naziv;
    int Letnik;
    public ObservableCollection<ObservableDatas> ObservableAvtoSaloni { get; set; }



    int idVmesna, idAvta, idAvtoSalona;
    public ObservableCollection<ObservableDatas> ObservableVmesna { get; set; }




    protected override void OnInitialized()
    {
        ObservableCollection<ObservableDatas> avti = new ObservableCollection<ObservableDatas>();
        ObservableCollection<ObservableDatas> salons = new ObservableCollection<ObservableDatas>();
        ObservableCollection<ObservableDatas> vmesna = new ObservableCollection<ObservableDatas>();


        using (var db = new AvtoSalonContext())
        {
            foreach (var item in db.Avtos.ToList())
            {
                avti.Add(new ObservableDatas() { id = item.id, Znamka = item.znamka, model = item.model, cena = item.cena });
            }

            foreach (var item in db.salons.ToList())
            {
                salons.Add(new ObservableDatas() { Naziv = item.naziv, id = item.id, Letnik = item.Letnik });
            }

            foreach (var item in db.vmesnas.ToList())
            {
                vmesna.Add(new ObservableDatas() { idVmesna = item.id, idAvta = item.idAvta, idAvtoSalona = item.idAvtosalona });
            }
        }

        ObservableAvti = new ObservableCollection<ObservableDatas>(avti);
        ObservableAvtoSaloni = new ObservableCollection<ObservableDatas>(salons);
        ObservableVmesna = new ObservableCollection<ObservableDatas>(vmesna);
    }
    public void DodajAvto()
    {


        using (var db = new AvtoSalonContext())
        {

            db.Avtos.Add(new Avto { id = uniqueid++, znamka = znamka, cena = cena, model = model });
            db.SaveChanges();
        }
        ObservableAvti.Add(new ObservableDatas() { id = uniqueid, Znamka = znamka, cena = cena, model = model });

    }
    public void IzbrisiAvto()
    {
        flagid = !flagid;
        if (ObservableAvti.Count() != 0)
        {
            using (var db = new AvtoSalonContext())
            {
                if (id > 0)
                {
                    foreach (var item in db.Avtos.ToList())
                    {
                        if (item.id == id)
                        {
                            db.Avtos.Remove(item);
                            db.SaveChanges();
                            break;
                        }
                    }
                    var neke = ObservableAvti.First(x => x.id == id);
                    ObservableAvti.Remove(neke);
                    foreach (var item in ObservableVmesna.ToList())
                    {
                        if (item.idAvta==neke.id)
                        {
                            ObservableVmesna.Remove(ObservableVmesna.First(x=>x.idAvta==id));
                            ObservableVmesna.Remove(item);
                            OdstraniOdvec(id, 0);
                        }
                    }
                }
            }



            flagid = !flagid;
        }
    }

    public void OdstraniOdvec(int avto, int salon)
    {

        using (var db= new AvtoSalonContext())
        {
            foreach (var item in db.vmesnas.ToList())
            {
                if (item.idAvta==avto)
                {
                    db.vmesnas.Remove(item);
                }
                if (item.idAvtosalona==salon)
                {
                    db.vmesnas.Remove(item);
                }

            }
            db.SaveChanges();
        }
    }


    public void PoosodobiAvto()
    {
        if (ObservableAvti.Count() != 0)
        {

            using (var db = new AvtoSalonContext())
            {
                foreach (var item in db.Avtos.ToList())
                {
                    if (item.id == id)
                    {
                        item.znamka = znamka;
                        item.model = model;
                        item.cena = cena;
                        db.SaveChanges();
                        break;
                    }
                }
            }
            var name = ObservableAvti.First(x => x.id == id);
            name.Znamka = znamka;
            name.model = model;
            name.cena = cena;

        }
    }



    public void DodajAvtoSalon()
    {


        using (var db = new AvtoSalonContext())
        {
            db.salons.Add(new AvtoSalon { id = uniqueid2++, Letnik = Letnik, naziv = naziv });
            db.SaveChanges();
        }
        ObservableAvtoSaloni.Add(new ObservableDatas { id = uniqueid2, Naziv = naziv, Letnik = Letnik });


    }

    public void IzbrisiAvtoSalon()
    {
        using (var db = new AvtoSalonContext())
        {
            if (IdAvtosalona > 0)
            {
                foreach (var item in db.salons.ToList())
                {
                    if (item.id == IdAvtosalona)
                    {
                        db.salons.Remove(item);
                        db.SaveChanges();
                        break;
                    }
                }
                var neke = ObservableAvtoSaloni.First(x => x.id == IdAvtosalona);
                ObservableAvtoSaloni.Remove(neke);
                OdstraniOdvec(0, IdAvtosalona);
                foreach (var item in ObservableVmesna.ToList())
                {
                    if (item.idAvtoSalona==neke.id)
                    {
                        ObservableVmesna.Remove(item);
                        OdstraniOdvec(0, idAvtoSalona);
                    }
                }



            }
        }
    }

    public void PoosodobiAvtoSalon()
    {
        using (var db = new AvtoSalonContext())
        {
            foreach (var item in db.salons.ToList())
            {
                if (item.id == IdAvtosalona)
                {
                    item.naziv = naziv;
                    item.Letnik = Letnik;
                    db.SaveChanges();
                    break;
                }
            }
        }
        var name = ObservableAvtoSaloni.First(x => x.id == IdAvtosalona);
        name.Naziv = naziv;
        name.Letnik = Letnik;
    }


    public bool PreveriAvtosalon(int index)
    {
        using (var db = new AvtoSalonContext())
        {
            foreach (var item in db.salons.ToList())
            {
                if (item.id == index)
                {
                    return true;
                }
            }
        }

        return false;
    }

    public bool PreveriAvto(int index)
    {
        using (var db = new AvtoSalonContext())
        {
            foreach (var item in db.Avtos.ToList())
            {
                if (item.id == index)
                {
                    return true;
                }
            }
        }

        return false;
    }

    public void DodajNaVmesno()
    {


        if (PreveriAvto(idAvta) && PreveriAvtosalon(idAvtoSalona))
        {
            using (var db = new AvtoSalonContext())
            {
                db.vmesnas.Add(new Vmesna { id = uniqueid3++, idAvta = idAvta, idAvtosalona = idAvtoSalona });//Preverjaj ce sploh osbtaja avto ali avtohisa
                db.SaveChanges();
            }

            ObservableVmesna.Add(new ObservableDatas() { idVmesna = uniqueid3, idAvta = idAvta, idAvtoSalona = idAvtoSalona });
        }


    }

    public void IzbrisiIzVmesne()
    {
        using (var db = new AvtoSalonContext())
        {

            if (idVmesna > 0)
            {
                foreach (var item in db.vmesnas.ToList())
                {
                    if (item.id == idVmesna)
                    {
                        db.vmesnas.Remove(item);
                        db.SaveChanges();
                        break;
                    }
                }
                ObservableVmesna.Remove(ObservableVmesna.First(x => x.idVmesna == idVmesna));
            }
        }
    }

    public void PoosodobiVmesno()
    {
        using (var db = new AvtoSalonContext())
        {
            foreach (var item in db.vmesnas.ToList())
            {
                if (item.id == idVmesna)
                {
                    item.idAvta = idAvta;
                    item.idAvtosalona = idAvtoSalona;
                    db.SaveChanges();
                    break;
                }
            }
        }

        var name = ObservableVmesna.First(x => x.idVmesna == idVmesna);
        name.idAvta = idAvta;
        name.idAvtoSalona = idAvtoSalona;
    }






    public class ObservableDatas : INotifyPropertyChanged
    {
        public int id { get; set; }
        private string znamka { get; set; }
        public string Znamka
        {
            get { return znamka; }
            set
            {
                this.znamka = value;
                NotifyPropertyChanged("CustomerID");
            }
        }
        public string model { get; set; }
        public double cena { get; set; }
        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string propertyName)
        {
            var handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        public int idSalona { get; set; }
        private string naziv { get; set; }
        public string Naziv
        {
            get { return naziv; }
            set
            {
                this.naziv = value;
                NotifyPropertyChanged("CustomerID");
            }
        }
        public int Letnik { get; set; }


        public int idVmesna { get; set; }
        private int IdAvta { get; set; }
        public int idAvtoSalona { get; set; }
        public int idAvta
        {
            get { return IdAvta; }
            set
            {
                this.IdAvta = value;
                NotifyPropertyChanged("CustomerID");
            }
        }


        public ObservableDatas()
        {

        }

        public ObservableDatas(int idsalona, string naziv, int leto)
        {
            this.idSalona = idsalona;
            this.Naziv = naziv;
            this.Letnik = leto;
            this.model = naziv;
            this.id = idsalona;
            this.znamka = naziv;
            this.cena = leto;
        }

    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AvtoService ForecastService { get; set; }
    }
}
#pragma warning restore 1591
